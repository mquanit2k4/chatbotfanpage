import request from "request";
import dotenv from "dotenv";
const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN;
const IMAGE_GET_STARTED = `https://bit.ly/imagestarted`;
const sleep = (ms) => {
    return new Promise(resolve => setTimeout(resolve, ms));
  };
dotenv.config();
let callSendAPI = (sender_psid, response) => {
  // Construct the message body
  let request_body = {
    recipient: {
      id: sender_psid,
    },
    message: response,
  };

  // Send the HTTP request to the Messenger Platform
  request(
    {
      uri: "https://graph.facebook.com/v9.0/me/messages",
      qs: { access_token: PAGE_ACCESS_TOKEN },
      method: "POST",
      json: request_body,
    },
    (err, res, body) => {
      if (!err) {
        console.log("message sent!");
      } else {
        console.error("Unable to send message:" + err);
      }
    }
  );
};

let getUserName = (sender_psid) => {
  return new Promise((resolve, reject) => {
    // Send the HTTP request to the Messenger Platform
    request(
      {
        uri: `https://graph.facebook.com/${sender_psid}?fields=first_name,last_name,profile_pic&access_token=${PAGE_ACCESS_TOKEN}`,
        method: "GET",
      },
      (err, res, body) => {
        console.log(body);
        if (!err) {
          body = JSON.parse(body);
          let userName = `${body.last_name} ${body.first_name}`;
          resolve(userName);
        } else {
          console.error("Unable to send message:" + err);
          reject(err);
        }
      }
    );
  });
};
let handleGerStarted = (sender_psid) => {
  return new Promise(async (resolve, reject) => {
    try {
      let userName = await getUserName(sender_psid);
      let response1 = {
        text: `Ch√†o ${userName}, em vui l√≤ng nh·∫Øn "casio" ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt v·ªÅ kh√≥a h·ªçc nh√© <3`,
      };

      let response2 = getStartedTemplate();
      // Send text message
      await callSendAPI(sender_psid, response1);

      // Send template message
      await callSendAPI(sender_psid, response2);
      resolve("done");
    } catch (e) {
      reject(e);
    }
  });
};

let getStartedTemplate = () => {
  let response = {
    attachment: {
      type: "template",
      payload: {
        template_type: "generic",
        elements: [
          {
            title: "KH√ìA H·ªåC CASIO VD-VDC 9+ 2K7",
            subtitle: "D∆∞·ªõi ƒë√¢y l√† 2 kh√≥a h·ªçc CASIO c·ªßa page",
            image_url: IMAGE_GET_STARTED,
            buttons: [
              {
                type: "postback",
                title: "KH√ìA THPTQG 2K7",
                payload: "THPT",
              },
              {
                type: "postback",
                title: "KH√ìA THPTQG + HSA 2K7",
                payload: "HSA",
              },
            ],
          },
        ],
      },
    },
  };
  return response;
};

let handleSendInfoCourseSingle = (sender_psid) => {
  return new Promise(async (resolve, reject) => {
    try {
      let response1 = {
        text: `H·ªçc ph√≠ c·ªßa kh√≥a hi·ªán t·∫°i l√† 200k nh∆∞ng n·∫øu em mu·ªën nh·∫≠n voucher gi·∫£m gi√° ch·ªâ c√≤n 150K th√¨ l√†m theo c√°c b∆∞·ªõc like v√† share trong post n√†y https://www.facebook.com/dobknhe/posts/491015820`,
      };


      let response2 = {
        text: `Khi tham gia kho√° h·ªçc e kh√¥ng ch·ªâ ƒë∆∞·ª£c h·ªçc c√°c ph∆∞∆°ng ph√°p gi·∫£i nhanh + CASIO c√°c d·∫°ng b√†i trong ƒë·ªÅ thi THPTQG m√† c√≤n ƒë∆∞·ª£c √¥n luy·ªán c√°c ƒë·ªÅ thi th·ª≠ c·ªßa Tr∆∞·ªùng, S·ªü qua c√°c bu·ªïi LIVE h·∫±ng tu·∫ßn ƒë·ªÉ ph·ª•c v·ª• cho k√¨ thi THPTQG 2025 lu√¥n nha. Kho√° n√†y k√©o d√†i ƒë·∫øn l√∫c cb thi xong k√¨ thi THPT lu√¥n nh√© ü•∞`,
      };

      let response3 = {
        text: `Ch√†o em, admin xin gi·ªõi thi·ªáu t·ªïng quan v·ªÅ kh√≥a CASIO VD-VDC THPTQG 2K7 ƒë·∫øn em: Kh√≥a h·ªçc s·∫Ω cung c·∫•p cho c√°c b·∫°n t·∫•t c·∫£ c√°c ph∆∞∆°ng ph√°p b·∫•m m√°y + c√°ch t∆∞ duy b·∫£n ch·∫•t ƒë·ªÉ l√†m c√°c d·∫°ng to√°n t·ª´ m·ª©c VD (v·∫≠n d·ª•ng, m·ª©c 8+ THPTQG) ƒë·∫øn VDC (v·∫≠n d·ª•ng cao, m·ª©c 9+ THPTQG) ·ªü t·∫•t c·∫£ c√°c ch∆∞∆°ng trong ch∆∞∆°ng tr√¨nh To√°n 12 (theo chu·∫©n ch∆∞∆°ng tr√¨nh m·ªõi). C√≥ VIDEO + FILE h∆∞·ªõng d·∫´n chi ti·∫øt ph∆∞∆°ng ph√°p v√† b√†i t·∫≠p k√®m theo ƒë·ªÉ c√°c b·∫°n luy·ªán t·∫≠p v√† n·∫Øm v·ªØng ph∆∞∆°ng ph√°p l√†m b√†i. ƒê·ªÉ bi·∫øt th√™m th√¥ng tin em c√≥ th·ªÉ xem ·ªü b√†i vi·∫øt https://www.facebook.com/dobknhe/posts/491015820355603 n√†y nha üíï`,
      };

      let response4 = {
        text: `Song song v·ªõi vi·ªác h·ªçc c√°c ph∆∞∆°ng ph√°p qua VIDEO v√† h·ªçc LIVE h·∫±ng tu·∫ßn trong group k√≠n. C√°c b·∫°n c√≤n ƒë∆∞·ª£c gi·∫£i ƒë√°p th·∫Øc m·∫Øc ƒë·ªëi v·ªõi c√°c b√†i t·∫≠p c√≥ th·ªÉ s·ª≠ d·ª•ng CASIO ƒë∆∞·ª£c th√¥ng qua vi·ªác tham gia box chat c√≥ s·ª± h·ªó tr·ª£ b·ªüi ch√≠nh admin v√† c√°c anh ch·ªã CTV 2k5, 2k6 c√≥ th√†nh t√≠ch xu·∫•t s·∫Øc ‚ú®`,
      };

      //   let response5 = getInfoCourseTemplate();
      //   // Send text message
      //   await callSendAPI(sender_psid, response);
      await callSendAPI(sender_psid, response3);
      console.log('Sent response1');
      await sleep(1000); 
      await callSendAPI(sender_psid, response2);
      console.log('Sent response1');
      await sleep(1000); 
      await callSendAPI(sender_psid, response4);
      console.log('Sent response1');
      await sleep(1000); 
      await callSendAPI(sender_psid, response1);
      console.log('Sent response1');
      await sleep(1000); 

      resolve("done");
    } catch (e) {
      reject(e);
    }
  });
};

let getInfoCourseTemplate = () => {};
export default {
  handleGerStarted,
  callSendAPI,
  handleSendInfoCourseSingle,
};
