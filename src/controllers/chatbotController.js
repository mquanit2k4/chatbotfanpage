import dotenv from "dotenv";
import request from "request";
const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN;
const verifyToken = process.env.VERIFY_TOKEN;

dotenv.config();
let getHomepage = (req, res) => {
  return res.render("homepage.ejs");
};

let postWebhook = (req, res) => {
  // Parse the request body from the POST
  let body = req.body;

  // Check the webhook event is from a Page subscription
  if (body.object === "page") {
    // Iterate over each entry - there may be multiple if batched
    body.entry.forEach(function (entry) {
      // Gets the body of the webhook event
      // Gets the body of the webhook event
      let webhook_event = entry.messaging[0];
      console.log(webhook_event);

      // Get the sender PSID
      let sender_psid = webhook_event.sender.id;
      console.log("Sender PSID: " + sender_psid);

      // Check if the event is a message or postback and
      // pass the event to the appropriate handler function
      if (webhook_event.message) {
        handleMessage(sender_psid, webhook_event.message);
      } else if (webhook_event.postback) {
        handlePostback(sender_psid, webhook_event.postback);
      }
    });

    // Return a '200 OK' response to all events
    res.status(200).send("EVENT_RECEIVED");
  } else {
    // Return a '404 Not Found' if event is not from a page subscription
    res.sendStatus(404);
  }
};

let getWebhook = (req, res) => {
  // Parse the query params
  let mode = req.query["hub.mode"];
  let token = req.query["hub.verify_token"];
  let challenge = req.query["hub.challenge"];

  // Check if a token and mode is in the query string of the request
  if (mode && token) {
    // Check the mode and token sent is correct
    if (mode === "subscribe" && token === verifyToken) {
      // Respond with the challenge token from the request
      console.log("WEBHOOK_VERIFIED");
      res.status(200).send(challenge);
    } else {
      // Respond with '403 Forbidden' if verify tokens do not match
      res.sendStatus(403);
    }
  }
};

function handleMessage(sender_psid, received_message) {
  let response = [];

  // Checks if the message contains text
  // Check words
  if (received_message.text === "casio") {
    // Create the payload for a basic text message, which
    // will be added to the body of our request to the Send API
    response = [
      // N·∫øu nhi·ªÅu tin nh·∫Øn ph·∫£i t·∫°o m·∫£ng c√°c tin nh·∫Øn
      {
        text: `Ch√†o em, admin xin gi·ªõi thi·ªáu t·ªïng quan v·ªÅ kh√≥a CASIO VD-VDC THPT 2K7 ƒë·∫øn em: Kh√≥a h·ªçc s·∫Ω cung c·∫•p cho c√°c b·∫°n t·∫•t c·∫£ c√°c ph∆∞∆°ng ph√°p b·∫•m m√°y + c√°ch t∆∞ duy b·∫£n ch·∫•t ƒë·ªÉ l√†m c√°c d·∫°ng to√°n t·ª´ m·ª©c VD (v·∫≠n d·ª•ng, m·ª©c 8+ THPTQG) ƒë·∫øn VDC (v·∫≠n d·ª•ng cao, m·ª©c 9+ THPTQG) ·ªü t·∫•t c·∫£ c√°c ch∆∞∆°ng trong ch∆∞∆°ng tr√¨nh To√°n 12 (theo chu·∫©n ch∆∞∆°ng tr√¨nh m·ªõi). C√≥ VIDEO + FILE h∆∞·ªõng d·∫´n chi ti·∫øt ph∆∞∆°ng ph√°p v√† b√†i t·∫≠p k√®m theo ƒë·ªÉ c√°c b·∫°n luy·ªán t·∫≠p v√† n·∫Øm v·ªØng ph∆∞∆°ng ph√°p l√†m b√†i. ƒê·ªÉ bi·∫øt th√™m th√¥ng tin em c√≥ th·ªÉ xem ·ªü b√†i vi·∫øt https://www.facebook.com/dobknhe/posts/491015820355603 n√†y nha üíï`,
      },
      {
        text: `Khi tham gia kho√° h·ªçc e kh√¥ng ch·ªâ ƒë∆∞·ª£c h·ªçc c√°c ph∆∞∆°ng ph√°p gi·∫£i nhanh + CASIO c√°c d·∫°ng b√†i trong ƒë·ªÅ thi THPTQG m√† c√≤n ƒë∆∞·ª£c √¥n luy·ªán c√°c ƒë·ªÅ thi th·ª≠ c·ªßa Tr∆∞·ªùng, S·ªü qua c√°c bu·ªïi LIVE h·∫±ng tu·∫ßn ƒë·ªÉ ph·ª•c v·ª• cho k√¨ thi THPTQG 2025 lu√¥n nha. Kho√° n√†y k√©o d√†i ƒë·∫øn l√∫c cb thi xong k√¨ thi THPT lu√¥n nh√© ü•∞`,
      },
      {
        text: `Song song v·ªõi vi·ªác h·ªçc c√°c ph∆∞∆°ng ph√°p qua VIDEO v√† h·ªçc LIVE h·∫±ng tu·∫ßn trong group k√≠n. C√°c b·∫°n c√≤n ƒë∆∞·ª£c gi·∫£i ƒë√°p th·∫Øc m·∫Øc ƒë·ªëi v·ªõi c√°c b√†i t·∫≠p c√≥ th·ªÉ s·ª≠ d·ª•ng CASIO ƒë∆∞·ª£c th√¥ng qua vi·ªác tham gia box chat c√≥ s·ª± h·ªó tr·ª£ b·ªüi ch√≠nh admin v√† c√°c anh ch·ªã CTV 2k5, 2k6 c√≥ th√†nh t√≠ch xu·∫•t s·∫Øc ‚ú®`,
      },
      {
        text: `H·ªçc ph√≠ c·ªßa kh√≥a hi·ªán t·∫°i l√† 200k nh∆∞ng n·∫øu em mu·ªën nh·∫≠n voucher gi·∫£m gi√° ch·ªâ c√≤n 150K th√¨ l√†m theo c√°c b∆∞·ªõc like v√† share trong post n√†y https://www.facebook.com/dobknhe/posts/491015820355603 v√† cap l·∫°i m√†n h√¨nh g·ª≠i cho ad nhaa ‚ù§Ô∏è`,
      },
    ];
  } else if (received_message.attachments) {
    // Get the URL of the message attachment
    let attachment_url = received_message.attachments[0].payload.url;
    response = {
      attachment: {
        type: "template",
        payload: {
          template_type: "generic",
          elements: [
            {
              title: "ƒê√¢y c√≥ ph·∫£i b·ª©c ·∫£nh c·ªßa b·∫°n kh√¥ng?",
              subtitle: "Nh·∫•n n√∫t ·ªü d∆∞·ªõi ƒë·ªÉ tr·∫£ l·ªùi.",
              image_url: attachment_url,
              buttons: [
                {
                  type: "postback",
                  title: "C√≥!",
                  payload: "yes",
                },
                {
                  type: "postback",
                  title: "Kh√¥ng!",
                  payload: "no",
                },
              ],
            },
          ],
        },
      },
    };
  }

  // G·ªçi h√†m ƒë·ªÉ g·ª≠i t·ª´ng tin nh·∫Øn m·ªôt
  callSendAPI(sender_psid, response);
}

// Handles messaging_postbacks events
function handlePostback(sender_psid, received_postback) {
  let response;

  // Get the payload for the postback
  let payload = received_postback.payload;

  // Set the response based on the postback payload
  if (payload === "yes") {
    response = { text: "Thanks!" };
  } else if (payload === "no") {
    response = { text: "Oops, try sending another image." };
  } else if (payload === "GET_STARTED") {
    response = {
      text: "Em vui l√≤ng nh·∫Øn 'casio' ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt v·ªÅ kh√≥a h·ªçc nh√© <3",
    };
  }
  // Send the message to acknowledge the postback
  callSendAPI(sender_psid, response);
}



// Sends response messages via the Send API
function callSendAPI(sender_psid, respons, callback) {
  // Construct the message body
  let request_body = {
    recipient: {
      id: sender_psid,
    },
    message: response,
  };

  // Send the HTTP request to the Messenger Platform
  request(
    {
      uri: "https://graph.facebook.com/v2.6/me/messages",
      qs: { access_token: PAGE_ACCESS_TOKEN },
      method: "POST",
      json: request_body,
    },
    (err, res, body) => {
      if (!err) {
        console.log("message sent!");
      } else {
        console.error("Unable to send message:" + err);
      }
    }
  );
}
let setupProfile = async (req, res) => {
  // Call Profile API Facebook
  let request_body = {
    get_started: { payload: "GET_STARTED" },
    whitelisted_domains: ["https://chatbotfanpage.onrender.com"],
  };

  // Send the HTTP request to the Messenger Platform
  await request(
    {
      // Ph·∫£i truy·ªÅn c·∫£ access_token v√†o uri ch·ª© kh√¥ng bi·∫øn thay th·∫ø s·∫Ω b·ªã l·ªói "Invalid OAuth access token"
      uri: `https://graph.facebook.com/v20.0/me/messenger_profile?access_token=EAAOu9I4yDOIBOwD8T5ca3bZCZBMhfamZC9XLLEeNtpTlR2132uMvTORDdy0u7WNI93Wat9LQ17FnZCiQUiunfY50R5oK5zzW5a3MSwMxTe9u5LOxRNE65EqRhBv7E6ZCUXkfV2MLRFAOn2NVZCedV4BV0NjiFBICutIFKqVZCL96Mwef5XMes8EmuICk2ODluEk`,
      qs: { access_token: process.env.PAGE_ACCESS_TOKEN },
      method: "POST",
      json: request_body,
    },
    (err, res, body) => {
      if (!err) {
        console.log(body);
        console.log("Setup user profile success!");
      } else {
        console.error("Unable to Setup user profile:" + err);
      }
    }
  );

  return res.send("Setup user profile success!");
};

export default {
  getHomepage,
  getWebhook,
  postWebhook,
  setupProfile,
};
